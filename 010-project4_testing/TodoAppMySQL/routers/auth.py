from datetime import timedelta, datetime
from fastapi import APIRouter, Depends
from pydantic import BaseModel
from typing import Annotated, Optional
from starlette import status
from ..database import SessionLocal
from fastapi import Depends, HTTPException, APIRouter
from ..models import User 
from sqlalchemy.orm import Session
from passlib.context import CryptContext
# CryptContext gi√∫p b·∫°n d·ªÖ d√†ng m√£ h√≥a v√† x√°c minh m·∫≠t kh·∫©u b·∫±ng c√°ch ƒë·ªãnh nghƒ©a m·ªôt "ng·ªØ c·∫£nh m√£ h√≥a" (encryption context), t·ª©c l√† c·∫•u h√¨nh c√°c thu·∫≠t to√°n v√† t√πy ch·ªçn m√£ h√≥a.

from fastapi.security import OAuth2PasswordRequestForm, OAuth2PasswordBearer
from jose import jwt, JWTError

# pip install "python-jose[cryptography]" 


'''
‚û°Ô∏è C√≥ th√™m prefix='/auth' ‚Üí t·∫•t c·∫£ c√°c API trong file n√†y s·∫Ω c√≥ URL b·∫Øt ƒë·∫ßu b·∫±ng /auth (v√≠ d·ª• /auth/token, /auth/)
‚û°Ô∏è tags=['auth'] ‚Üí gi√∫p nh√≥m l·∫°i trong Swagger UI cho r√µ r√†ng.
'''
router = APIRouter(
    prefix='/auth',
    tags=['auth']
)

# ph·∫ßn Header
# l·∫•y ng·∫´u nhi√™n token :  trong terminal g√µ   openssl rand -hex 32   ƒë·ªÉ t·∫°o 1 m√£ ng·∫´u nhi√™n nh∆∞ trong secret_key
SECRET_KEY = 'ff7bee372bc1d7e7dfed41be278807b8c5e037c6cbede3c82f4c6697cc8a999d'
ALGORITHM = 'HS256' # g·ªçi thu·∫≠t to√°n


bcrypt_context = CryptContext(schemes=['bcrypt'], deprecated='auto')
'''
- schemes=['bcrypt']: nghƒ©a l√† b·∫°n ƒëang ch·ªâ ƒë·ªãnh thu·∫≠t to√°n m√£ h√≥a l√† bcrypt.
- bcrypt l√† m·ªôt thu·∫≠t to√°n bƒÉm m·∫°nh, th∆∞·ªùng d√πng ƒë·ªÉ l∆∞u tr·ªØ m·∫≠t kh·∫©u m·ªôt c√°ch an to√†n
- deprecated='auto': l√† m·ªôt t√πy ch·ªçn gi√∫p t·ª± ƒë·ªông ƒë√°nh d·∫•u nh·ªØng thu·∫≠t to√°n kh√¥ng c√≤n ƒë∆∞·ª£c d√πng n·ªØa l√† ƒë√£ l·ªói th·ªùi (deprecated).
'''

# Th√™m t√≠nh nƒÉng ph√¢n quy·ªÅn (b·∫£o v·ªá route v·ªõi JWT)
# ƒê√¢y l√† c∆° ch·∫ø ƒë·ªÉ t·ª± ƒë·ªông l·∫•y token t·ª´ header Authorization c·ªßa request khi client g·ª≠i.
oauth2_bearer = OAuth2PasswordBearer(tokenUrl='auth/token')


def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

db_dependency = Annotated[Session, Depends(get_db)]

def authenticate_user(username: str, password: str, db):
    user = db.query(User).filter(User.username == username).first()
    if not user: # not None and not empty
        return False
    if not bcrypt_context.verify(password, user.hashed_password): 
        ''' so s√°nh m·∫≠t kh·∫©u ƒë√£ nh·∫≠p r·ªìi d√πng thu·∫≠t to√°n m√£ h√≥a  v·ªõi m·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c m√£ h√≥a trong db '''
        return False
    return user


"""
T·∫°o JWT ch·ª©a payload g·ªìm:
sub: username (ch·ªß th·ªÉ)
id: user id
role : vai tr√≤ c·ªßa ng ƒëang mu·ªën x√°c th∆∞cj
exp: th·ªùi gian h·∫øt h·∫°n
M√£ h√≥a b·∫±ng SECRET_KEY v·ªõi HS256.
"""
def create_access_token(username: str, user_id: int, role : str,expires_delta: timedelta):
        encode = {'sub': username, 'id': user_id, 'role': role} 
        expires = datetime.utcnow() + expires_delta
        encode.update({'exp': expires})
        return jwt.encode(encode, SECRET_KEY, algorithm=ALGORITHM)


'''
‚û°Ô∏è H√†m n√†y gi√∫p gi·∫£i m√£ token, x√°c th·ª±c ng∆∞·ªùi d√πng ƒëang g·ªçi API n√†o ƒë√≥.
üëâ D√πng ƒë·ªÉ √°p d·ª•ng cho c√°c route c·∫ßn b·∫£o v·ªá nh∆∞ /profile, /todo, v.v.


‚úÖ M·ª•c ti√™u c·ªßa get_current_user()
H√†m n√†y d√πng ƒë·ªÉ x√°c th·ª±c ng∆∞·ªùi d√πng ƒëang g·ªçi API, b·∫±ng c√°ch:

L·∫•y JWT token t·ª´ HTTP Header (Authorization: Bearer <token>).
Gi·∫£i m√£ token b·∫±ng secret key.
Tr√≠ch xu·∫•t th√¥ng tin ng∆∞·ªùi d√πng t·ª´ payload (v√≠ d·ª•: username, user_id).
Tr·∫£ v·ªÅ th√¥ng tin ng∆∞·ªùi d√πng hi·ªán t·∫°i
'''

# token : Annotated[str, Depends(oauth2_bearer)]  : "L·∫•y token t·ª´ header Authorization, ƒë·∫£m b·∫£o ƒë√≥ l√† ki·ªÉu chu·ªói (str), v√† g√°n v√†o bi·∫øn token ƒë·ªÉ s·ª≠ d·ª•ng."
async def get_current_user(token: Annotated[str, Depends(oauth2_bearer)]):
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get('sub')
        user_id: int = payload.get('id')
        user_role : str = payload.get('role')

        if username is None or user_id is None:
            raise HTTPException(
                status_code=status.HTTP_401_UNAUTHORIZED,
                detail='Could not validate user'
            )
        return {'username': username, 'id': user_id, 'role':user_role}
    except JWTError:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, 
                            detail='Could not validate user')
            

class CreateUserRequest(BaseModel):
    email: str 
    username: str
    first_name: str
    last_name: str
    hashed_password: str
    is_active:bool
    role: str
    phone_number: str


class Token(BaseModel):
    access_token: str
    token_type: str



@router.post('/', status_code=status.HTTP_201_CREATED)
async def create_user(user: CreateUserRequest, db : db_dependency):
    user_model = User(**user.model_dump())
    user_model.hashed_password = bcrypt_context.hash(user.hashed_password)
    db.add(user_model)
    db.commit()
    return 'them thanh cong'

@router.get('/', status_code=status.HTTP_200_OK)
async def read_all(db: db_dependency):
    return db.query(User).all()


# response_model=Token	Gi√∫p FastAPI ki·ªÉm so√°t v√† t·ª± sinh docs chu·∫©n x√°c
@router.post('/token', response_model=Token)
async def login_for_access_token(
    form_data : Annotated[OAuth2PasswordRequestForm, Depends()],
    db : db_dependency
):
    user = authenticate_user(form_data.username, form_data.password, db) 
    """usernaem, pass, db"""
    if not user:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, 
                            detail='Could not validate user')
    token = create_access_token(user.username, user.id, user.role, timedelta(minutes=20))
    return {'access_token': token, 'token_type': 'bearer'}
    

